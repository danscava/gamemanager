@using GameManager.Data.Enums
@using GameManager.Page.Models
<EditForm Model="@GameModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Title</label>
        <InputText @bind-Value="GameModel.Title" class="form-control" />
        <ValidationMessage For="@(() => GameModel.Title)" />
    </div>
    <div class="form-group">
        <label>Year</label>
        <InputNumber @bind-Value="GameModel.Year" class="form-control" />
        <ValidationMessage For="@(() => GameModel.Year)" />
    </div>
    <div class="form-group">
        <label>Platform</label>
        <select class="form-control selectpicker" @bind="GameModel.Platform">
            <option>--select--</option>
            @foreach (var item in Enum.GetValues(typeof(Platform)))
            {
                <option value="@item">@(((Platform) item).GetDescription())</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label>Media Type</label>
        <select class="form-control selectpicker" @bind="GameModel.MediaType">
            <option>--select--</option>
            @foreach (var item in Enum.GetValues(typeof(MediaType)))
            {
                <option value="@item">@(((MediaType) item).GetDescription())</option>
            }
        </select>
    </div>
    <button class="btn btn-primary">
        @if (Loading)
        {
            <span class="spinner-border spinner-border-sm mr-1"></span>
        }
        @ButtonText
    </button>
    @if (!string.IsNullOrEmpty(Error))
    {
        <div class="alert alert-danger mt-3 mb-0">@Error</div>
    }
</EditForm>
@code {
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public String Error { get; set; }
    [Parameter] public bool Loading { get; set; }
    [Parameter] public GameCreateModel GameModel { get; set; }
    [Parameter] public EventCallback HandleValidSubmit { get; set; }
}
